=======================================================================================================================================================================
									How to use sessions
=======================================================================================================================================================================

Django provides full support for anonymous sessions. 

The session framework lets you store and retrieve arbitrary data on a per-site-visitor basis. 

It stores data on the server side and abstracts the sending and receiving of cookies. 

Cookies contain a session ID – not the data itself



------------------
Enabling sessions
------------------

Sessions are implemented via a piece of middleware.

To enable session functionality, do the following:

	* Edit the MIDDLEWARE setting and make sure it contains 'django.contrib.sessions.middleware.SessionMiddleware'. The default settings.py created by 
	  django-admin startproject has SessionMiddleware activated.

If you don’t want to use sessions, you might as well remove the SessionMiddleware line from MIDDLEWARE and 'django.contrib.sessions' from your INSTALLED_APPS.




-------------------------------
1. Configuring the session engine
-------------------------------

By default, Django stores sessions in your database (using the model django.contrib.sessions.models.Session).

in some setups it’s faster to store session data elsewhere, so Django can be configured to store session data on your filesystem or in your cache.


-----------------------------------
1.1 Using database-backed sessions
-----------------------------------

If you want to use a database-backed session, you need to add 'django.contrib.sessions' to your INSTALLED_APPS setting.

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

Once you have configured your installation, run manage.py migrate to install the single database table that stores session data.




--------------------------
1.2 Using cached sessions
--------------------------

For better performance, you may want to use a cache-based session backend.

To store session data using Django’s cache system, you’ll first need to make sure you’ve configured your cache.

NOTE:
------
You should only use cache-based sessions if you’re using the Memcached cache backend. The local-memory cache backend doesn’t retain data long enough to be a good 
choice, and it’ll be faster to use file or database sessions directly instead of sending everything through the file or database cache backends. 
Additionally, the local-memory cache backend is NOT multi-process safe, therefore probably not a good choice for production environments.

If you have multiple caches defined in CACHES, Django will use the default cache. To use another cache, set SESSION_CACHE_ALIAS to the name of that cache.


Once your cache is configured, you’ve got two choices for how to store data in the cache:

	1. Set SESSION_ENGINE to "django.contrib.sessions.backends.cache" for a simple caching session store. Session data will be stored directly in your cache. 
	   However, session data may not be persistent: cached data can be evicted if the cache fills up or if the cache server is restarted.

	2. For persistent, cached data, set SESSION_ENGINE to "django.contrib.sessions.backends.cached_db". This uses a write-through cache – every write to the cache 
	   will also be written to the database. Session reads only use the database if the data is not already in the cache.

NOTE:
------
Both session stores are quite fast, but the simple cache is faster because it disregards persistence. In most cases, the cached_db backend will be fast enough, but if 
you need that last bit of performance, and are willing to let session data be expunged from time to time, the cache backend is for you.

If you use the cached_db session backend, you also need to follow the above configuration instructions for the using database-backed sessions.

------------------------------
1.3 Using file-based sessions
------------------------------

To use file-based sessions, set the SESSION_ENGINE setting to "django.contrib.sessions.backends.file".

You might also want to set the SESSION_FILE_PATH setting (which defaults to output from tempfile.gettempdir(), most likely /tmp) to control where Django stores session
files. Be sure to check that your Web server has permissions to read and write to this location.




--------------------------------
1.4 Using cookie-based sessions
--------------------------------

To use cookies-based sessions, set the SESSION_ENGINE setting to "django.contrib.sessions.backends.signed_cookies".

The session data will be stored using Django’s tools for cryptographic signing and the SECRET_KEY setting.


NOTE:
------
It’s recommended to leave the SESSION_COOKIE_HTTPONLY setting on True to prevent access to the stored data from JavaScript.



Warning:
---------

1. If the SECRET_KEY is not kept secret and you are using the PickleSerializer, this can lead to arbitrary remote code execution.

	An attacker in possession of the SECRET_KEY can not only generate falsified session data, which your site will trust, but also remotely execute arbitrary code,
 	as the data is serialized using pickle.

	If you use cookie-based sessions, pay extra care that your secret key is always kept completely secret, for any system which might be remotely accessible.


2. The session data is signed but not encrypted.

	When using the cookies backend the session data can be read by the client.

	A MAC (Message Authentication Code) is used to protect the data against changes by the client, so that the session data will be invalidated when being tampered
 	with. The same invalidation happens if the client storing the cookie (e.g. your user’s browser) can’t store all of the session cookie and drops data. Even 
	though Django compresses the data, it’s still entirely possible to exceed the common limit of 4096 bytes per cookie.


3. No freshness guarantee.

	Note also that while the MAC can guarantee the authenticity of the data (that it was generated by your site, and not someone else), and the integrity of the 
	data (that it is all there and correct), it cannot guarantee freshness i.e. that you are being sent back the last thing you sent to the client. This means 
	that for some uses of session data, the cookie backend might open you up to replay attacks. Unlike other session backends which keep a server-side record of 
	each session and invalidate it when a user logs out, cookie-based sessions are not invalidated when a user logs out. Thus if an attacker steals a user’s cookie,
	they can use that cookie to login as that user even if the user logs out. Cookies will only be detected as ‘stale’ if they are older than your 
	SESSION_COOKIE_AGE.


4. Performance.

	Finally, the size of a cookie can have an impact on the speed of your site.



---------------------------
2. Using sessions in views
---------------------------
When SessionMiddleware is activated, each HttpRequest object will have a session attribute, which is a dictionary-like object.

You can read it and write to request.session at any point in your view. You can edit it multiple times.



===> value = request.session['key']         # Getting value from session  # raises Key Error if key does not exists.

===> value = request.session.get('key', default = 'some value')     # Getting value from session  # 2nd param is default value to return instead of key error if key not exists.




===> request.session['key'] = 'value'       # Setting value to session



===> del request.session['key']		    # Deleting value from session   # This raises KeyError if the given key isn’t in the session.

===> value = request.session.pop('key')     # Deleting value from session   # This raises KeyError if the given key isn’t in the session.



===> request.session.keys()                 # Gives list of all keys in the session    # dict_keys(['_auth_user_id', '_auth_user_backend', '_auth_user_hash'])


===> request.session.items()                # Gives all items in the session  # dict_items([('_auth_user_backend', 'django.contrib.auth.backends.ModelBackend'), ('_auth_user_hash', 'b72b4f84336ad481ec23917e4e696f3911564a86'), ('_auth_user_id', '1')])




===> request.session.setdefault('key', 'value')    # Use setdefault to set the default value when the key does not exist.




===> request.session.flush()		 # This will logout the user and Deletes the current session data from the session and deletes the session cookie. This is used
					   if you want to ensure that the previous session data can’t be accessed again from the user’s browser 
					   (for example, the django.contrib.auth.logout() function calls it). This will delete the current session row from the
					   "django_session" table where the session data will be stored.


===> request.session.clear()             # This will logout the user and clear the session. But it will not delete the current session row from the 'django_session'
					   table instead of deleting it will update the current session row with new session_key.




===> request.session.set_test_cookie()   # Test out whether your browser supports cookies. While all modern web browsers do support cookies it is worthwhile checking 
					   your browser’s settings regarding cookies. If you have your browser’s security level set to a high level, certain cookies 
					   may get blocked. Due to the way cookies work, you won’t be able to test this until the user’s next page request.



===> request.session.test_cookie_worked()    # Returns either True or False, depending on whether the user’s browser accepted the test cookie. Due to the way cookies 
					       work, you’ll have to call set_test_cookie() on a previous, separate page request.


===> request.session.delete_test_cookie()    # Deletes the test cookie. Use this to clean up after yourself.





===> request.session.get_session_cookie_age()    # Returns the age of session cookies, in seconds.  NEW in Django 3.0



===> request.session.set_expiry(300)          # Sets the expiration time for the session. user will loged off automatically if session expiries.
						You can pass a number of different values.

						If value is an integer, the session will expire after that many seconds of inactivity.(300) sec == 5 min
						
						If value is a datetime or timedelta object, the session will expire at that specific date/time.
						
						Note that datetime and timedelta values are only serializable if you are using the PickleSerializer.
						
						If value is 0, the user’s session cookie will expire when the user’s Web browser is closed.
					
						If value is None, the session reverts to using the global session expiry policy.

						Reading a session is not considered activity for expiration purposes. Session expiration is computed from the last 
						time the session was modified.


===> request.session.get_expiry_age()         # Returns the number of seconds until this session expires. For sessions with no custom expiration (or those set to 
						expire at browser close), this will equal SESSION_COOKIE_AGE.

						This function accepts two optional keyword arguments:

							modification: last modification of the session, as a datetime object. Defaults to the current time.

							expiry:       expiry information for the session, as a datetime object, an int (in seconds), or None. 
								      Defaults to the value stored in the session by set_expiry(), if there is one, or None.



===> request.session.get_expiry_date()		# Returns the date this session will expire. For sessions with no custom expiration (or those set to expire at browser close), this will equal the date SESSION_COOKIE_AGE seconds from now.

						  This function accepts the same keyword arguments as get_expiry_age().





===> request.session.get_expire_at_browser_close()    # Returns either True or False, depending on whether the user’s session cookie will expire when the user’s Web 
							browser is closed.




===> request.session.clear_expired()			# Removes expired sessions from the session store.



===> request.session.cycle_key()			# Creates a new session key while retaining the current session data. 
							  "django.contrib.auth.login()" calls this method to mitigate against session fixation.






----------------------
Session serialization
----------------------

By default, Django serializes session data using JSON.


You can use the SESSION_SERIALIZER setting to customize the session serialization format.

Ex:
----
settings.py

SESSION_SERIALIZER = custom session serialization format other than json.



NOTE:
------
It is highly recommend sticking with JSON serialization especially if you are using the cookie backend.

For example, here’s an attack scenario if you use pickle to serialize session data.

If you’re using the signed cookie session backend and SECRET_KEY is known by an attacker (there isn’t an inherent vulnerability in Django that would cause it to leak),
the attacker could insert a string into their session which, when unpickled, executes arbitrary code on the server. The technique for doing so is simple and easily 
available on the internet. Although the cookie session storage signs the cookie-stored data to prevent tampering, a SECRET_KEY leak immediately escalates to a remote 
code execution vulnerability.



--------------------------
Write your own serializer
--------------------------
pass for now








--------------------------
Session object guidelines
--------------------------
1. Use normal Python strings as dictionary keys on request.session. This is more of a convention than a hard-and-fast rule.

2. Session dictionary keys that begin with an underscore are reserved for internal use by Django.

3. Don’t override request.session with a new object, and don’t access or set its attributes. Use it like a Python dictionary.

























