======================================================================================================================================================================
									Django shortcut functions
======================================================================================================================================================================

The package django.shortcuts collects helper functions and classes that “span” multiple levels of MVC.



1. render(request, template_name, context=None, content_type=None, status=None, using=None)
--------------------------------------------------------------------------------------------

Combines a given template with a given context dictionary and returns an HttpResponse object with that rendered text.


	Required arguments
	--------------------

		***request
		-----------
			The request object used to generate this response.

		***template_name
		-----------------
			The full name of a template to use or sequence of template names. If a sequence is given, the first template that exists will be used.


	Optional arguments
	-------------------

		***context
		-----------
			A dictionary of values to add to the template context. By default, this is an empty dictionary. If a value in the dictionary is callable, 
			the view will call it just before rendering the template.

		***content_type
		----------------
			The MIME type to use for the resulting document. Defaults to 'text/html'.

		***status
		----------
			The status code for the response. Defaults to 200.

		***using
		---------
			The NAME of a template engine to use for loading the template.



2. redirect(to, *args, permanent=False, **kwargs)
--------------------------------------------------

Returns an HttpResponseRedirect to the appropriate URL for the arguments passed.


The arguments could be:
------------------------

	*** A model: the model’s get_absolute_url() function will be called. By passing some object; that object’s get_absolute_url() method will be called to figure 
	    out the redirect URL.


		from django.shortcuts import redirect

		def my_view(request):
    		    obj = MyModel.objects.get(...)
    		    return redirect(obj)


	*** A view name, possibly with arguments: reverse() will be used to reverse-resolve the name. By passing the name of a view and optionally some positional or 
	    keyword arguments; the URL will be reverse resolved using the reverse() method.


		from django.shortcuts import redirect

		def my_view(request):
    		    return redirect('some-view-name', foo='bar')
		

	*** An absolute or relative URL, which will be used as-is for the redirect location. By passing a hardcoded URL to redirect to.


		from django.shortcuts import redirect
		
		def my_view(request):
    		    return redirect('/some/url/')
				(or)
		    return redirect('https://example.com/')



		By default issues a temporary redirect; pass permanent=True to issue a permanent redirect.




3. get_object_or_404(klass, *args, **kwargs)
---------------------------------------------

Calls get() on a given model manager, but it raises Http404 instead of the model’s DoesNotExist exception.


	Required arguments
	-------------------

		class
		---------
			A Model class, a Manager, or a QuerySet instance from which to get the object.

		**kwargs
		---------
			Lookup parameters, which should be in the format accepted by get() and filter().


Ex:
----

def publishername(request, pubname):
    
    QuerySet = Publisher.objects.get(name = pubname).book_set.all()
        
    return render(request, 'booklist.html', {'data':QuerySet})


in this case it will raise "DoesNotExist at /bookstore/publishers/dfd/" exception if the no model object is found with the given name.



from django.shortcuts import get_object_or_404

def publishername(request, pubname):
   
    QuerySet = get_object_or_404(Publisher, name = pubname).book_set.all()
        
    return render(request, 'booklist.html', {'data':QuerySet})



in this case it will raise "Page not found (404)" exdception if the no model object is found with the given name.




4. get_list_or_404(klass, *args, **kwargs)
-------------------------------------------

Returns the result of filter() on a given model manager cast to a list, raising Http404 if the resulting list is empty.


	Required arguments
	-------------------

		class
		------
			A Model, Manager or QuerySet instance from which to get the list.

		**kwargs
		---------
			Lookup parameters, which should be in the format accepted by get() and filter().




Ex:
----
from django.shortcuts import get_list_or_404

def ratingbooks(request, year, rat):
    
    QuerySet = get_list_or_404(Book, Q(pubdate__year = year) & Q(rating=rat))   # this is equal to "QuerySet = list(Book.objects.filter(Q(pubdate__year = year) & Q(rating=rat)))"
    
    return HttpResponse(QuerySet)


This will raise "Page not found (404)" if the matching QuerySet results are empty.

http://127.0.0.1:8000/bookstore/books/2020/5.0/ ===> "Page not found (404)"  Since, no book with rating 5.0 in the year 2020.



























