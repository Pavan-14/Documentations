1. change direcroty to virtual environment

2. install celery " pip install celery "

3. Create a new file with name "celery.py" in the project directory

4. paste this code in the above file celery.py

====================code for celery.py===============================
from __future__ import absolute_import, unicode_literals

import os

from celery import Celery

# set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Dlearning.settings')
os.environ.setdefault('FORKED_BY_MULTIPROCESSING', '1')  # use this line if you installed celery 4 version above in step 2

app = Celery('Dlearning')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
# - namespace='CELERY' means all celery-related configuration keys
#   should have a `CELERY_` prefix.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django app configs.
app.autodiscover_tasks()


@app.task(bind=True)
def debug_task(self):
    print('Request: {0!r}'.format(self.request))

===================================code end==============================

5. paste this code in __init__.py file of project directory

=======================code for __init__.py file=========================
from __future__ import absolute_import, unicode_literals

# This will make sure the app is always imported when
# Django starts so that shared_task will use this app.
from .celery import app as celery_app

__all__ = ('celery_app',)

==========================code end========================================

6. create tasks.py file in the application(app) directory

7. paste this code in the above file tasks.py file

=========================code for tasks.py=================================
# Create your tasks here
from __future__ import absolute_import, unicode_literals
from celery import shared_task

from django.core.mail import send_mail

from time import sleep

@shared_task
def sendingmail(user, passcode, email):
    sleep(5)
    msg = 'Account credentials: '+str(user)+' : '+str(passcode)
    send_mail('Account creaated', msg, 'djangoclient9@gmail.com', [email])

===============================end code===================================

8. import this tasks in views.py file and use it in signup view

===========================views.py file signup view======================
def signup(request):
    if request.user.is_authenticated:
        return redirect('home-page')
    else:
        if request.method == 'POST':
            form = forms.CustomUserRegistrationForm(request.POST)
            if form.is_bound:
                if form.is_valid():
                    username = form.cleaned_data['username']
                    passcode = form.cleaned_data['password1']
                    emailid = form.cleaned_data['email']
                    form.save()
                    form = forms.CustomUserRegistrationForm()
                    sendingmail.delay(username, passcode, emailid)
                    messages.success(request, 'User created successfully')
                    return redirect('signin-path')
        else:
            form  = forms.CustomUserRegistrationForm()
        
        return render(request, 'signup.html', {'form':form})

9. Now we need to configure celery settings and mail sending settings

============================settings.py file============================
# SMTP Configurations to send password-rest mail
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'djangoclient9@gmail.com'       # make sure that you allowed less secure apps on this email in your gmail settings
EMAIL_HOST_PASSWORD = 'django@007'
EMAIL_USE_TLS = True    # 587
EMAIL_USE_SSL = False   # 465


# Celery settings
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Nairobi'

10. Now install redis from this link " https://github.com/microsoftarchive/redis/releases" and install it. while installing select checkbox add redis to path

11. after installing go to C:\Program Files\Redis and run redis-cli by double clicking and redis cli will be opened

12. then type shutdown in the redis cli next type start and close cli

13. open cmd and type this command "redis-server" this will starts the redis server
	if the server started successfully it will give following msg
	[14612] 15 Jun 11:11:44.511 # Server started, Redis version 3.0.504
	[14612] 15 Jun 11:11:44.513 * The server is now ready to accept connections on port 6379
	if server not started repeat the steps 11 and 12.

14. Now open cmd and type this command "celery -A <project name> worker -l info"
	this command gives following msg if it's started celery successfully

	[2020-06-15 12:50:03,713: INFO/MainProcess] Connected to redis://localhost:6379//
	[2020-06-15 12:50:04,844: INFO/MainProcess] celery@DESKTOP-RTH194S ready.


15. Then open another cmd start python server "python manage.py runserver" and test the application wether celery task in sending mail upon user signup














