==========================================================================================================================
Updating multiple objects at once
==========================================================================================================================
Sometimes you want to set a field to a particular value for all the objects in a QuerySet. You can do this with the update() method.


>>> Entry.objects.filter(pub_date__year=2020)
<QuerySet [<Entry: Pandas Hack for ML>, <Entry: Preprocessing data before feeding it to ML model>, <Entry: Django2.0.07>, <Entry: Visualizing data using python libraries>]>



>>> Entry.objects.filter(pub_date__year=2020).update(mod_date=datetime.datetime.now())
4

Note:1
=======
The update() method is applied instantly and returns the number of rows matched by the query 


Note:2
=======
To update a non-relation field, provide the new value as a constant. 
But, To update ForeignKey fields, set the new value to be the new model instance you want to point to. For example:

>>> Entry.objects.filter(blog__name__istartswith='Django')
<QuerySet [<Entry: Django2.0.07>, <Entry: matplotlib tutuorial>, <Entry: seaborn tutuorial>]>


See matplotlib and seaborn are not related to Dajango blog i want to update the blog relationship with blog Data visualization for these Entries


>>> Entry.objects.filter(headline__icontains='Tutuorial')
<QuerySet [<Entry: matplotlib tutuorial>, <Entry: seaborn tutuorial>]>


>>> b = Blog.objects.get(name__iexact='Data visualization')
>>> b
<Blog: Data visualization>       # new blog instance to point/link for filtered Entries


>>> Entry.objects.filter(headline__icontains='Tutuorial').update(blog=b)
2


>>> Entry.objects.filter(blog__name__istartswith='Django')
<QuerySet [<Entry: Django2.0.07>]>
