=======================================================================================================================================================================
									HTML forms
=======================================================================================================================================================================

Django provides a range of tools and libraries to help you build forms to accept input from site visitors, and then process and respond to the input.



HTML forms:
------------

In HTML, a form is a collection of elements inside <form>...</form> that allow a visitor to do things like enter text, select options, manipulate objects or controls, 
and so on, and then send that information back to the server.

Some of these form interface elements - text input or checkboxes - are built into HTML itself. Others are much more complex; an interface that pops up a date picker 
or allows you to move a slider or manipulate controls will typically use JavaScript and CSS as well as HTML form <input> elements to achieve these effects.


As well as its <input> elements, a form must specify two things:

	1. where: the URL to which the data corresponding to the user’s input should be returned

	2. how: the HTTP method the data should be returned by



example, the login form for the Django admin contains several <input> elements: one of type="text" for the username, one of type="password" for the password, and one 
of type="submit" for the “Log in” button. It also contains some hidden text fields that the user doesn’t see, which Django uses to determine what to do next.


It also tells the browser that the form data should be sent to the URL specified in the <form>’s action attribute and it should be sent using the HTTP mechanism 
specified by the method attribute.



GET and POST:
--------------

GET and POST are the only HTTP methods to use when dealing with forms.

Django’s login form is returned using the POST method, in which the browser bundles up the form data, encodes it for transmission, sends it to the server, and then 
receives back its response.


GET, by contrast, bundles the submitted data into a string, and uses this to compose a URL. The URL contains the address where the data must be sent, as well as the 
data keys and values. You can see this in action if you do a search in the Django documentation, which will produce a URL of the form 
https://docs.djangoproject.com/search/?q=forms&release=1.


GET and POST are typically used for different purposes.

Any request that could be used to change the state of the system - for example, a request that makes changes in the database - should use POST. 
GET should be used only for requests that do not affect the state of the system.




Django’s role in forms:
------------------------

Handling forms is a complex business. Consider Django’s admin, where numerous items of data of several different types may need to be prepared for display in a form, 
rendered as HTML, edited using a convenient interface, returned to the server, validated and cleaned up, and then saved or passed on for further processing.


Django’s form functionality can simplify and automate vast portions of this work, and can also do it more securely than most programmers would be able to do in code 
they wrote themselves.



Django handles three distinct parts of the work involved in forms:

	1. preparing and restructuring data to make it ready for rendering

	2. creating HTML forms for the data

	3. receiving and processing submitted forms and data from the client



It is possible to write code that does all of this manually, but Django can take care of it all for you.
