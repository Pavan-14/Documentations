=======================================================================================================================================================================
								Creating forms from models (Model Forms)
=======================================================================================================================================================================

For instance, you might have a BlogComment model, and you want to create a form that lets people submit comments. In this case, it would be redundant to define the 
field types in your form, because you’ve already defined the fields in your model.

For this reason, Django provides a helper class that lets you create a Form class from a Django model.


Ex:
----

from django import forms
from Bookstore.models import Book

class Bookform(forms.ModelForm):
    class Meta:
        model = Book
        fields = ['name', 'author', 'publisher', 'pages', 'price', 'rating', 'pubdate']



Field types
------------
The generated Form class will have a form field for every model field specified, in the order specified in the fields attribute.

Each model field has a corresponding default form field. For example, a CharField on a model is represented as a CharField on a form. A model ManyToManyField is 
represented as a MultipleChoiceField. 

Here is the full list of conversions.


Model field			Form field
======================================================================================================================================
AutoField			Not represented in the form
BigAutoField			Not represented in the form
BigIntegerField			IntegerField with min_value set to -9223372036854775808 and max_value set to 9223372036854775807.
BinaryField			CharField, if editable is set to True on the model field, otherwise not represented in the form.
BooleanField			BooleanField, or NullBooleanField if null=True.
CharField			CharField with max_length set to the model field’s max_length and empty_value set to None if null=True.
DateField			DateField
DateTimeField			DateTimeField
DecimalField			DecimalField
DurationField			DurationField
EmailField			EmailField
FileField			FileField
FilePathField			FilePathField
FloatField			FloatField
ForeignKey			ModelChoiceField (see below)
ImageField			ImageField
IntegerField			IntegerField
IPAddressField	         	IPAddressField
GenericIPAddressField		GenericIPAddressField
ManyToManyField	         	ModelMultipleChoiceField (see below)
NullBooleanField		NullBooleanField
PositiveIntegerField	        IntegerField
PositiveSmallIntegerField	IntegerField
SlugField	                SlugField
SmallAutoField	                Not represented in the form
SmallIntegerField	        IntegerField
TextField	                CharField with widget=forms.Textarea
TimeField			TimeField
URLField			URLField
UUIDField			UUIDField


NOTE-1:
--------

As you might expect, the ForeignKey and ManyToManyField model field types are special cases:

1. ForeignKey is represented by django.forms.ModelChoiceField, which is a ChoiceField whose choices are a model QuerySet.

2. ManyToManyField is represented by django.forms.ModelMultipleChoiceField, which is a MultipleChoiceField whose choices are a model QuerySet.


NOTE-2:
--------

In addition, each generated form field has attributes set as follows:

1. If the model field has blank=True, then required is set to False on the form field. Otherwise, required=True.

2. The form field’s label is set to the verbose_name of the model field, with the first character capitalized.

3. The form field’s help_text is set to the help_text of the model field.

4. If the model field has choices set, then the form field’s widget will be set to Select, with choices coming from the model field’s choices. The choices will 
   normally include the blank choice which is selected by default. If the field is required, this forces the user to make a selection. The blank choice will not be 
   included if the model field has blank=False and an explicit default value (the default value will be initially selected instead).



Validation on a ModelForm
--------------------------

There are two main steps involved in validating a ModelForm.

1. Validating the form

2. Validating the model instance


There are three steps involved in validating a model instance:

 1. Validate the model fields - Model.clean_fields()
 2. Validate the model as a whole - Model.clean()
 3. Validate the field uniqueness - Model.validate_unique()

All three steps are performed when you call a model’s full_clean() method.

But, we don't have to worry about all thesethings, calling to 'is_valid()' will perform these validation steps for all the fields that are included on the form.



Selecting the fields to use
----------------------------

It is strongly recommended that you explicitly set all fields that should be edited in the form using the fields attribute.

1. Set the fields attribute to the special value '__all__' to indicate that all fields in the model should be used.

2. Set the exclude attribute of the ModelForm’s inner Meta class to a list of fields to be excluded from the form.


If either of these are used, the order the fields appear in the form will be the order the fields are defined in the model, with ManyToManyField instances appearing 
last.

NOTE-1:
--------
Django applies the following rule: if you set editable=False on the model field, any form created from the model via ModelForm will not include that field.



NOTE-2:
--------

Any fields not included in a form by the above logic will not be set by the form’s save() method. Also, if you manually add the excluded fields back to the form, they 
will not be initialized from the model instance.

Django will prevent any attempt to save an incomplete model, so if the model does not allow the missing fields to be empty, and does not provide a default value for 
the missing fields, any attempt to save() a ModelForm with missing fields will fail. To avoid this failure, you must instantiate your model with initial values for 
the missing, but required fields.




Overriding the default fields
------------------------------

To specify a custom widget for a field, use the widgets attribute of the inner Meta class. This should be a dictionary mapping field names to widget classes or 
instances.

For example, if you want the CharField for the name attribute of Book to be represented by a <textarea> instead of its default <textinput>, you can override 
the field’s widget.


EX:
----

class Bookform(forms.ModelForm):
    class Meta:
        model = Book
        fields = ['name', 'author', 'publisher', 'pages', 'price', 'rating', 'pubdate']
        exclude = []  # fields to exclude in the form
        
        widgets = {
            'name' : forms.Textarea(attrs={'class':'form-control'}),
            'author' : forms.SelectMultiple(attrs={'class':'form-control'}),
            'publisher' : forms.Select(attrs={'class':'form-control'}),
            'pages' : forms.NumberInput(attrs={'class':'form-control'}),
            'price' : forms.NumberInput(attrs={'class':'form-control'}),
            'rating' : forms.NumberInput(attrs={'class':'form-control'}),
            'pubdate' : forms.DateTimeInput(attrs={'class':'form-control'})
        }


*** The widgets dictionary accepts either widget instances (e.g., Textarea(...)) or classes (e.g., Textarea). Note that the widgets dictionary is ignored for a model 
field with a non-empty choices attribute. In this case, you must override the form field to use a different widget.




*** Similarly, you can specify the labels, help_texts and error_messages attributes of the inner Meta class if you want to further customize a field.

Ex:
----

class Bookform(forms.ModelForm):
    class Meta:
        model = Book
        fields = ['name', 'author', 'publisher', 'pages', 'price', 'rating', 'pubdate']
        exclude = []  # fields to exclude in the form
        
        widgets = {
            'name' : forms.TextInput(attrs={'class':'form-control'}),
            'author' : forms.SelectMultiple(attrs={'class':'form-control'}),
            'publisher' : forms.Select(attrs={'class':'form-control'}),
            'pages' : forms.NumberInput(attrs={'class':'form-control'}),
            'price' : forms.NumberInput(attrs={'class':'form-control'}),
            'rating' : forms.NumberInput(attrs={'class':'form-control'}),
            'pubdate' : forms.DateTimeInput(attrs={'class':'form-control'})
        }
        
        labels = {
            'name' : ('Book Title'),
        }
        
        help_texts = {
            'name' : ('Book name should be meaningfull'),
            'publisher' : ('Please select one of the publishers')
        }
        
        error_messages = {
            'rating' : {
                'max_length' : ('rate out of 5'),
            },
            
            'price' : {
                'decimal_places' : ('Round decimal places to 2')
            }
        }



By default form's field type is initiated by the field type specified in the Model class variabiles. But, You can also specify field_classes to customize the type of 
fields instantiated by the form. 

Ex:
----

class Bookform(forms.ModelForm):
    class Meta:
        model = Book
        fields = ['name', 'author', 'publisher', 'pages', 'price', 'rating', 'pubdate']
        field_classes = {
            'name' : forms.CharField,
            'pages' : forms.IntegerField,
        }



Enabling localization of fields
--------------------------------
By default, the fields in a ModelForm will not localize their data. To enable localization for fields, you can use the localized_fields attribute on the Meta class.

Ex:
----
class Bookform(forms.ModelForm):
    class Meta:
        model = Book
        fields = ['name', 'author', 'publisher', 'pages', 'price', 'rating', 'pubdate']
        field_classes = {
            'name' : forms.CharField,
            'pages' : forms.IntegerField,
        }
        exclude = []  # fields to exclude in the form
        localized_fields = ['pubdate', ]


If localized_fields is set to the special value '__all__', all fields will be localized.





Form inheritance
-----------------
you can extend and reuse ModelForms by inheriting them. This is useful if you need to declare extra fields or extra methods on a parent class 

Ex:
----

class ExtendBookform(Bookform):

    def some_extra_method(self):
        ...some logic...


You can also subclass the parent’s Meta inner class if you want to change the Meta.fields or Meta.exclude lists.

class ExtendBookform(Bookform):

    def some_extra_method(self):
        ...some logic...

    class Meta(Bookform.Meta):
	exclude = ['rating', 'pages']


There are a couple of things to note, however.

	1. Normal Python name resolution rules apply. If you have multiple base classes that declare a Meta inner class, only the first one will be used. This means 
	   the child’s Meta, if it exists, otherwise the Meta of the first parent, etc.

	2. It’s possible to inherit from both Form and ModelForm simultaneously, however, you must ensure that ModelForm appears first in the MRO. This is because 
	   these classes rely on different metaclasses and a class can only have one metaclass.

	3. It’s possible to declaratively remove a Field inherited from a parent class by setting the name to be None on the subclass.

You can only use this technique to opt out from a field defined declaratively by a parent class; it won’t prevent the ModelForm metaclass from generating a default field. 



ModelForm factory function
---------------------------

You can create forms from a given model using the standalone function modelform_factory(), instead of using a class definition. This may be more convenient if you do 
not have many customizations to make:


Ex:
----
from django.forms import modelform_factory
from myapp.models import Book

BookForm = modelform_factory(Book, fields=("author", "title"))



This can also be used to make modifications to existing forms, for example by specifying the widgets to be used for a given field.

from django.forms import Textarea, modelform_factory
from myapp.models import Book

Form = modelform_factory(Book, form=BookForm, widgets={"title": Textarea()})





Saving Modelfrom in views.py
------------------------------

def addbook(request):
    if request.method == 'POST':
        form  = forms.Bookform(request.POST)
        
        if form.is_bound:
            if form.is_valid():
                form.save()

