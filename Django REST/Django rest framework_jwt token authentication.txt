=====================================================
Django REST Framework JWT Authentication
=====================================================

1. pip install djangorestframework

2. pip install djangorestframework-jwt

3. Custom AUTH_USER_MODEL setting

	By default, Django assumes that the user model is django.contrib.auth.models.User. We want to use our own custom User model.

4. Tell Django to use our User model instead of using its own.

	settings.py
	------------
	AUTH_USER_MODEL = '<app name>.<class name of custom user model>'   Ex: 'Bookstore.Myuser'

5. We have to tell Django REST Framework(DRF) which authentication we are using and the permission classes.

	settings.py
	------------
	REST_FRAMEWORK = {

    		'DEFAULT_AUTHENTICATION_CLASSES': [

			'rest_framework_jwt.authentication.JSONWebTokenAuthentication',                        # This is for JWT authentication

			######## Default authentication classes provided by Django restframework ###########
			#										   #
        		# 'rest_framework.authentication.BasicAuthentication',              		   #
        		# 'rest_framework.authentication.SessionAuthentication',			   #   # Not Required in this JWT authentication
        		# 'rest_framework.authentication.TokenAuthentication',				   #
			#										   #
			####################################################################################

    		],
    
    		'DEFAULT_PERMISSION_CLASSES': [
        		'rest_framework.permissions.IsAuthenticated',
        		'rest_framework.permissions.IsAdminUser',
    		],
    
	}


6. Define JWT settings.

	settings.py
	------------
	from datetime import timedelta

	JWT_AUTH = {
  	'JWT_ENCODE_HANDLER'                :   'rest_framework_jwt.utils.jwt_encode_handler',
  	'JWT_DECODE_HANDLER'                :   'rest_framework_jwt.utils.jwt_decode_handler',
	'JWT_PAYLOAD_HANDLER'               :   'rest_framework_jwt.utils.jwt_payload_handler', 
  	'JWT_PAYLOAD_GET_USER_ID_HANDLER'   :   'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',
 	'JWT_RESPONSE_PAYLOAD_HANDLER'      :   'rest_framework_jwt.utils.jwt_response_payload_handler',
 
  	'JWT_SECRET_KEY'                    :   'SECRET_KEY',
  	'JWT_GET_USER_SECRET_KEY'           :    None,
  	'JWT_PUBLIC_KEY'                    :    None,
  	'JWT_PRIVATE_KEY'                   :    None,
  	'JWT_ALGORITHM'                     :    'HS256',
  	'JWT_VERIFY'                        :    True,
  	'JWT_VERIFY_EXPIRATION'             :    True,
  	'JWT_LEEWAY'                        :    0,
  	'JWT_EXPIRATION_DELTA'              :    timedelta(days=30),
  	'JWT_AUDIENCE'                      :    None,
  	'JWT_ISSUER'                        :    None,
  	'JWT_ALLOW_REFRESH'		    :    False,
  	'JWT_REFRESH_EXPIRATION_DELTA'      :    timedelta(days=30),
  	'JWT_AUTH_HEADER_PREFIX'            :    'Bearer',
  	'JWT_AUTH_COOKIE'                   :    None,
	}


	# JWT_PAYLOAD_HANDLER     for  the data we want to pass as payload.
	# JWT_ENCODE_HANDLER      for  the payload that we want to encode.
	# JWT_SECRET_KEY          for  the secret key to encode/decode the token
	# JWT_ALGORITHM           for  which algorithm to use
	# JWT_VERIFY              for  if we want to verify the token, should always be True
	# JWT_VERIFY_EXPIRATION   for  should the token be expired.
	# JWT_EXPIRATION_DELTA    for  token expiration time, can me mins hours days 
	# JWT_AUTH_HEADER_PREFIX  for  prefix to be used with the token, generally, we prefer Bearer.


7. 